package gofere2e

import (
	"testing"

	"github.com/chronicleprotocol/infestor"
	"github.com/chronicleprotocol/infestor/origin"

	"github.com/stretchr/testify/suite"
)

func TestPriceRETH2ESuite(t *testing.T) {
	suite.Run(t, new(PriceRETHE2ESuite))
}

type PriceRETHE2ESuite struct {
	SmockerAPISuite
}

func (s *PriceRETHE2ESuite) TestPrice() {
	err := infestor.NewMocksBuilder().
		Reset().
		Add(origin.NewExchange("rocketpool").WithSymbol("RETH/ETH").
			WithCustom("price", "0x0000000000000000000000000000000000000000000000000e795da792fcbf67")).
		Add(origin.NewExchange("balancerV2").
			WithCustom("match", "32296969ef14eb0c6d29669c550d4a044913023").
			WithCustom("response", "0000000000000000000000000000000000000000000000000000000000f1af6200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000ddef0116e5787f700000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000dec19bf143c0aed00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000e795da792fcbf670000000000000000000000000000000000000000000000000000000000002a3000000000000000000000000000000000000000000000000000000000635a7a9f")).
		Add(origin.NewExchange("curve").
			WithCustom("match", "dc24316b9ae028f1497c275eb9192a3ea0f67022").
			WithCustom("response", "0000000000000000000000000000000000000000000000000000000000f1b00b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000ddddcd3e0dcac4e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000d4b16fbcb0c3c92")).
		Add(origin.NewExchange("wsteth").WithSymbol("WSTETH/ETH").WithPrice(1)).
		Add(origin.NewExchange("ethrpc")).
		Deploy(s.api)

	s.Require().NoError(err)
	out, _, err := callGofer("-c", s.ConfigPath, "price", "RETH/ETH")
	s.Require().NoError(err)
	s.Require().NotEmpty(out)

	p, err := parseGoferPrice(out)
	s.Require().NoError(err)
	s.Require().Equal("aggregator", p.Type)
	s.Require().Equal(1.0429677630199397, p.Price)
	s.Require().Greater(len(p.Prices), 0)
	s.Require().Equal("median", p.Parameters["method"])
	s.Require().Equal("3", p.Parameters["minimumSuccessfulSources"])
}

func (s *PriceRETHE2ESuite) TestCircuit() {
	err := infestor.NewMocksBuilder().
		Reset().
		Add(origin.NewExchange("rocketpool").WithSymbol("RETH/ETH").
			WithCustom("price", "0x0000000000000000000000000000000000000000000000001b7314242fae3395")). // 1.97
		Add(origin.NewExchange("balancerV2").WithSymbol("RETH/WETH").
			WithCustom("match", "01e19cf2d73a72ef1332c882f20534b6519be0276").
			WithCustom("response", "0000000000000000000000000000000000000000000000000000000000f1ae1900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000dec19bf143c0aed00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000e795da792fcbf670000000000000000000000000000000000000000000000000000000000002a3000000000000000000000000000000000000000000000000000000000635a7a9f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000dde952b2b374c17")).
		Add(origin.NewExchange("curve").WithSymbol("RETH/WSTETH")).
		Add(origin.NewExchange("wsteth").WithSymbol("WSTETH/STETH")).
		Add(origin.NewExchange("curve").WithSymbol("STETH/ETH").
			WithCustom("match", "dc24316b9ae028f1497c275eb9192a3ea0f67022").
			WithCustom("response", "0000000000000000000000000000000000000000000000000000000000f1ae2500000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000dde952b2b374c1700000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000dec19bf143c0aed00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000e795da792fcbf670000000000000000000000000000000000000000000000000000000000002a3000000000000000000000000000000000000000000000000000000000635a7a9f")).
		Add(origin.NewExchange("ethrpc")).
		Deploy(s.api)

	s.Require().NoError(err)
	_, _, err = callGofer("-c", s.ConfigPath, "price", "RETH/ETH")
	s.Require().Error(err)
}
