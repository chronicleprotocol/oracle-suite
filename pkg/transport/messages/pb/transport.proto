syntax = "proto3";

option go_package = "github.com/chronicleprotocol/oracle-suite/pkg/transport/messages/pb";

message AppInfo {
  string name = 1;
  string version = 2;
}

//
// Legacy price
//

message Price {
  // Price:
  string wat = 1; // asset name
  bytes val = 2; // big.Int encoded as bytes
  int64 age = 3; // timestamp

  // Ethereum Signature:
  bytes vrs = 4; // v, r, s combined into one byte array

  // Fields 5, 6 and 7 are not longer used. They must not be used in the future.

  // Additional data:
  bytes trace = 8;
  string version = 9;
}

//
// DataPoint
//

message DataPointValue {
  oneof value {
    bytes static = 1;
    DataPointTickValue tick = 2;
  }
}

message DataPointTickValue {
  string pair = 1; // Pair name, e.g. "ETH/USD".
  bytes price = 2; // Price value (bn.DecFixedPoint).
  bytes volume24h = 3; // Volume in last 24 hours (bn.DecFixedPoint).
}

message DataPoint {
  DataPointValue value = 1; // Data point value.
  int64 timestamp = 2; // Timestamp of the data point.
  repeated DataPoint subPoints = 3; // Sub data points.
  map<string, bytes> meta = 4; // Additional meta data.
}

message DataPointMessage {
  string model = 1; // Model name that produced the data point.
  bytes ecdsaSignature = 3; // Feed signature (types.Signature).
  DataPoint dataPoint = 2; // Data point.

  AppInfo appInfo = 1000; // Application info.
}

//
// MuSig
//

message MuSigMeta {
  oneof msgMeta {
    MuSigMetaTickV1 ticks = 1;
  }
}

message MuSigMetaTickV1 {
  message FeedTick {
    bytes val = 1; // Tick value (bn.DecFixedPoint).
    int64 age = 2; // Unix timestamp.
    bytes vrs = 3; // Feed signature (types.Signature).
  }
  message Optimistic {
    bytes ecdsaSignature = 1; // Feed signature (types.Signature).
    bytes signersIndexes = 2; // Indexes of signers that participated in this MuSig signature.
  }
  string wat = 1; // Asset name (e.g. "ETH/USD").
  bytes val = 2; // Median value of all ticks (bn.DecFixedPoint).
  int64 age = 3; // Unix timestamp of the oldest tick.
  repeated Optimistic optimistic = 4; // Optional data required for optimistic poke.
  repeated FeedTick ticks = 5; // Ticks used to calculate median along with feed signatures.
}

message MuSigInitializeMessage {
  bytes sessionID = 1;
  int64 startedAtTimestamp = 2;
  string msgType = 3;
  bytes msgBody = 4;
  optional MuSigMeta msgMeta = 5;
  repeated bytes signers = 6;

  AppInfo appInfo = 1000; // Application info.
}

message MuSigTerminateMessage {
  bytes sessionID = 1;
  string reason = 2;

  AppInfo appInfo = 1000; // Application info.
}

message MuSigCommitmentMessage {
  bytes sessionID = 1;
  bytes pubKeyX = 2;
  bytes pubKeyY = 3;
  bytes commitmentKeyX = 4;
  bytes commitmentKeyY = 5;

  AppInfo appInfo = 1000; // Application info.
}

message MuSigPartialSignatureMessage {
  bytes sessionID = 1;
  bytes partialSignature = 2;

  AppInfo appInfo = 1000; // Application info.
}

message MuSigSignatureMessage {
  bytes sessionID = 1;
  int64 computedAtTimestamp = 2;
  string msgType = 3;
  bytes msgBody = 4;
  optional MuSigMeta msgMeta = 5;
  repeated bytes signers = 6;
  bytes commitment = 7;
  bytes schnorrSignature = 8;

  AppInfo appInfo = 1000; // Application info.
}

//
// Greet
//

message Greet {
  bytes signature = 1;
  bytes pubKeyX = 2;
  bytes pubKeyY = 3;
  string webURL = 4;

  AppInfo appInfo = 1000; // Application info.
}
